(window.webpackJsonp = window.webpackJsonp || []).push([[0], { 178: function (e, a, t) { e.exports = t(381) }, 380: function (e, a, t) {}, 381: function (e, a, t) { 'use strict'; t.r(a); const r = t(1); const s = t.n(r); const n = t(29); const l = t.n(n); const o = t(79); const m = t(44); const i = t(45); const c = t(48); const u = t(47); const d = t(21); const h = t(144); const b = t(145); const g = t(146); const p = t(77); const f = (function (e) { Object(c.a)(t, e); const a = Object(u.a)(t); function t (e) { let r; return Object(m.a)(this, t), (r = a.call(this, e)).handleChange = function (e) { r.setState(Object(o.a)({}, e.target.name, e.target.value)), console.log(r.state) }, r.formSubmit = function () { return r.state.password !== r.state.confirmPassword ? (alert('passwords did not matched'), !1) : (alert('Form Submitted Successfully'), r.setState({ formValues: [r.state.userName, r.state.mobile, r.state.emailId], showDetails: !0 }), console.log(r.state.formValues), r.props.history.push({ pathname: '/home/employeelist', data: r.state.formValues }), !0) }, r.state = { userName: '', lastName: '', mobile: '', emailId: '', password: '', confirmPassword: '', formValues: [], showDetails: !1 }, r } return Object(i.a)(t, [{ key: 'render', value: function () { const e = this.state; const a = e.userName; const t = e.emailId; const r = e.mobile; const n = e.password; const l = e.confirmPassword; return s.a.createElement('div', null, s.a.createElement('div', null, s.a.createElement('p', { className: 'h4 text-center text-primary font-weight-bold font-italic' }, 'Sign-Up')), s.a.createElement(d.AvForm, { onValidSubmit: this.formSubmit }, s.a.createElement(h.a, null, s.a.createElement(b.a, null, s.a.createElement(g.a, { sm: '12', md: { size: 6, offset: 3 } }, s.a.createElement(d.AvField, { onChange: this.handleChange, name: 'userName', label: 'User Name', type: 'text', validate: { required: { value: { userName: a }, errorMessage: 'Please enter your user name' }, pattern: { value: '^[A-Za-z0-9]+$', errorMessage: 'First Name must be composed only with letter and numbers' }, minLength: { value: 4, errorMessage: 'User name must be b/w 4 to 16 characters' }, maxLength: { value: 16, errorMessage: 'User name must be b/w 6 to 16 characters' } } }))), s.a.createElement(b.a, null, s.a.createElement(g.a, { sm: '12', md: { size: 6, offset: 3 } }, s.a.createElement(d.AvField, { onChange: this.handleChange, name: 'mobile', label: 'Mobile No', type: 'text', validate: { required: { value: { mobile: r }, errorMessage: 'Please enter your mobile number' }, pattern: { value: '^[0-9]+$', errorMessage: 'Mobile Number must be composed only with numbers' }, minLength: { value: 10, errorMessage: 'Your mobile number must be composed of 10 digits' }, maxLength: { value: 10 } } }))), s.a.createElement(b.a, null, s.a.createElement(g.a, { sm: '12', md: { size: 6, offset: 3 } }, s.a.createElement(d.AvField, { onChange: this.handleChange, name: 'emailId', label: 'Email id', type: 'email', errorMessage: 'Invalid email id', validate: { required: { value: { emailId: t }, errorMessage: 'Please enter your email address' } } }))), s.a.createElement(b.a, null, s.a.createElement(g.a, { sm: '12', md: { size: 6, offset: 3 } }, s.a.createElement(d.AvField, { onChange: this.handleChange, name: 'password', label: 'Password', type: 'password', validate: { required: { value: { password: n }, errorMessage: 'Please enter your password' }, pattern: { value: '^[A-Za-z0-9]+$', errorMessage: 'Password must be composed only with letter and numbers' }, minLength: { value: 5, errorMessage: 'Password name must be b/w 5 to 16 characters' }, maxLength: { value: 16, errorMessage: 'Password name must be b/w 5 to 16 characters' } } }))), s.a.createElement(b.a, null, s.a.createElement(g.a, { sm: '12', md: { size: 6, offset: 3 } }, s.a.createElement(d.AvField, { onChange: this.handleChange, name: 'confirmPassword', label: 'Confirm Password', type: 'password', validate: { required: { value: { confirmPassword: l }, errorMessage: 'Please enter your confirm password' }, pattern: { value: '^[A-Za-z0-9]+$', errorMessage: 'Confirm Password must be composed only with letter and numbers' }, minLength: { value: 5, errorMessage: 'Password name must be b/w 5 to 16 characters' }, maxLength: { value: 16, errorMessage: 'Password name must be b/w 5 to 16 characters' } } }))), s.a.createElement(b.a, null, s.a.createElement(g.a, { className: 'text-center', sm: '12', md: { size: 6, offset: 3 } }, s.a.createElement(p.a, { type: 'submit', color: 'primary' }, 'Submit'))))), s.a.createElement('div', null, this.state.showDetails && s.a.createElement('div', { className: 'mt-5' }, s.a.createElement(s.a.Fragment, null, s.a.createElement('p', { className: 'text-secondary h5 font-weight-bold font-italic' }, 'Submitted form values')), s.a.createElement('ul', { style: { listStyleType: 'none' } }, s.a.createElement('li', null, s.a.createElement('span', { style: { fontWeight: 'bold', fontStyle: 'italic', color: 'grey' } }, 'User Name:', ' '), this.state.userName), s.a.createElement('li', null, s.a.createElement('span', { style: { fontWeight: 'bold', fontStyle: 'italic', color: 'grey' } }, 'Mobile No:', ' '), this.state.mobile), s.a.createElement('li', null, s.a.createElement('span', { style: { fontWeight: 'bold', fontStyle: 'italic', color: 'grey' } }, 'Mail Address:', ' '), this.state.emailId))))) } }]), t }(s.a.Component)); const v = t(57); const w = t(34); const E = (function (e) { Object(c.a)(t, e); const a = Object(u.a)(t); function t () { return Object(m.a)(this, t), a.apply(this, arguments) } return Object(i.a)(t, [{ key: 'render', value: function () { return s.a.createElement('div', null, s.a.createElement('p', { className: ' h1 text-center text-secondary font-weight-bold font-italic mt-5' }, 'Employee Portal'), s.a.createElement(v.b, { to: '/home/login', className: 'btn btn-primary float-left  ml-5 mt-5' }, 'Login'), s.a.createElement(v.b, { to: '/home/register', className: 'btn btn-primary float-right mr-5 mt-5' }, 'Sign Up')) } }]), t }(s.a.Component)); const y = (function (e) { Object(c.a)(t, e); const a = Object(u.a)(t); function t (e) { let r; return Object(m.a)(this, t), (r = a.call(this, e)).handleChange = function (e) { r.setState(Object(o.a)({}, e.target.name, e.target.value)), console.log(r.state) }, r.formSubmit = function () { return r.state.loginUserName === 'admin' && r.state.loginPassword === 'admin' ? (alert('credentials matched'), r.props.history.push('/home/employeelist'), !0) : (alert('invalid credentials'), !1) }, r.state = { loginUserName: '', loginPassword: '' }, r } return Object(i.a)(t, [{ key: 'render', value: function () { const e = this.state; const a = e.loginUserName; const t = e.loginPassword; return s.a.createElement('div', null, s.a.createElement('div', null, s.a.createElement('p', { className: ' h4 text-center text-primary font-weight-bold font-italic' }, 'Login')), s.a.createElement(d.AvForm, { onValidSubmit: this.formSubmit }, s.a.createElement(h.a, null, s.a.createElement(b.a, null, s.a.createElement(g.a, { sm: '12', md: { size: 6, offset: 3 } }, s.a.createElement(d.AvField, { onChange: this.handleChange, name: 'loginUserName', label: 'User Name', type: 'text', validate: { required: { value: { loginUserName: a }, errorMessage: 'Please enter your user name' }, pattern: { value: '^[A-Za-z0-9]+$', errorMessage: 'First Name must be composed only with letter and numbers' }, minLength: { value: 4, errorMessage: 'User name must be b/w 4 to 16 characters' }, maxLength: { value: 16, errorMessage: 'User name must be b/w 6 to 16 characters' } } }))), s.a.createElement(b.a, null, s.a.createElement(g.a, { sm: '12', md: { size: 6, offset: 3 } }, s.a.createElement(d.AvField, { onChange: this.handleChange, name: 'loginPassword', label: 'Password', type: 'password', validate: { required: { value: { loginPassword: t }, errorMessage: 'Please enter your password' }, pattern: { value: '^[A-Za-z0-9]+$', errorMessage: 'Password must be composed only with letter and numbers' }, minLength: { value: 5, errorMessage: 'Password name must be b/w 5 to 16 characters' }, maxLength: { value: 16, errorMessage: 'Password name must be b/w 6 to 16 characters' } } }))), s.a.createElement(b.a, null, s.a.createElement(g.a, { sm: '12', md: { size: 6, offset: 3 } }, s.a.createElement(p.a, { type: 'submit', color: 'primary' }, 'Login')))))) } }]), t }(s.a.Component)); t(380); function P () { return s.a.createElement('div', { className: 'App' }, s.a.createElement(v.a, null, s.a.createElement(w.d, null, s.a.createElement(w.b, { path: '/home', exact: !0, component: E }), s.a.createElement(w.b, { path: '/home/login', component: y }), s.a.createElement(w.b, { path: '/home/register', component: f }), s.a.createElement(w.a, { to: '/home' })))) } const M = document.getElementById('root'); l.a.render(s.a.createElement(P, null), M) } }, [[178, 1, 2]]])
// # sourceMappingURL=main.67e77891.chunk.js.map

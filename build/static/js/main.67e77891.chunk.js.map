{"version":3,"sources":["components/Registration.js","components/HomePage.js","components/Login.js","index.js"],"names":["Registration","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","this","call","handleChange","event","setState","_defineProperty","target","name","value","console","log","state","formSubmit","password","confirmPassword","alert","formValues","userName","mobile","emailId","showDetails","history","push","pathname","data","lastName","_createClass","key","_this$state","React","createElement","className","AvForm","onValidSubmit","Container","Row","Col","sm","md","size","offset","AvField","onChange","label","type","validate","required","errorMessage","pattern","minLength","maxLength","Button","color","Fragment","style","listStyleType","fontWeight","fontStyle","Component","HomePage","apply","arguments","Link","to","Login","loginUserName","loginPassword","App","Router","Switch","Route","path","exact","component","Redirect","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.67e77891.chunk.js","sourcesContent":["import React from \"react\";\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\nimport { Button, Container, Row, Col } from \"reactstrap\";\n\nexport default class Registration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: \"\",\n      lastName: \"\",\n      mobile: \"\",\n      emailId: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      formValues: [],\n      showDetails: false,\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n    console.log(this.state);\n  };\n\n  formSubmit = () => {\n    if (this.state.password !== this.state.confirmPassword) {\n      alert(\"passwords did not matched\");\n      return false;\n    } else {\n      alert(\"Form Submitted Successfully\");\n      this.setState({\n        formValues: [\n          this.state.userName,\n          this.state.mobile,\n          this.state.emailId,\n        ],\n        showDetails: true,\n      });\n      console.log(this.state.formValues);\n      this.props.history.push({\n        pathname: \"/home/employeelist\",\n        data: this.state.formValues,\n      });\n      return true;\n    }\n  };\n\n  render() {\n    const { userName, emailId, mobile, password, confirmPassword } = this.state;\n    return (\n      <div>\n        <div>\n          <p className=\"h4 text-center text-primary font-weight-bold font-italic\">\n            Sign-Up\n          </p>\n        </div>\n        <AvForm onValidSubmit={this.formSubmit}>\n          <Container>\n            <Row>\n              <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                <AvField\n                  onChange={this.handleChange}\n                  name=\"userName\"\n                  label=\"User Name\"\n                  type=\"text\"\n                  validate={{\n                    required: {\n                      value: { userName },\n                      errorMessage: \"Please enter your user name\",\n                    },\n                    pattern: {\n                      value: \"^[A-Za-z0-9]+$\",\n                      errorMessage:\n                        \"First Name must be composed only with letter and numbers\",\n                    },\n                    minLength: {\n                      value: 4,\n                      errorMessage: \"User name must be b/w 4 to 16 characters\",\n                    },\n                    maxLength: {\n                      value: 16,\n                      errorMessage: \"User name must be b/w 6 to 16 characters\",\n                    },\n                  }}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                <AvField\n                  onChange={this.handleChange}\n                  name=\"mobile\"\n                  label=\"Mobile No\"\n                  type=\"text\"\n                  validate={{\n                    required: {\n                      value: { mobile },\n                      errorMessage: \"Please enter your mobile number\",\n                    },\n                    pattern: {\n                      value: \"^[0-9]+$\",\n                      errorMessage:\n                        \"Mobile Number must be composed only with numbers\",\n                    },\n                    minLength: {\n                      value: 10,\n                      errorMessage:\n                        \"Your mobile number must be composed of 10 digits\",\n                    },\n                    maxLength: { value: 10 },\n                  }}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                <AvField\n                  onChange={this.handleChange}\n                  name=\"emailId\"\n                  label=\"Email id\"\n                  type=\"email\"\n                  errorMessage=\"Invalid email id\"\n                  validate={{\n                    required: {\n                      value: { emailId },\n                      errorMessage: \"Please enter your email address\",\n                    },\n                  }}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                <AvField\n                  onChange={this.handleChange}\n                  name=\"password\"\n                  label=\"Password\"\n                  type=\"password\"\n                  validate={{\n                    required: {\n                      value: { password },\n                      errorMessage: \"Please enter your password\",\n                    },\n                    pattern: {\n                      value: \"^[A-Za-z0-9]+$\",\n                      errorMessage:\n                        \"Password must be composed only with letter and numbers\",\n                    },\n                    minLength: {\n                      value: 5,\n                      errorMessage:\n                        \"Password name must be b/w 5 to 16 characters\",\n                    },\n                    maxLength: {\n                      value: 16,\n                      errorMessage:\n                        \"Password name must be b/w 5 to 16 characters\",\n                    },\n                  }}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                <AvField\n                  onChange={this.handleChange}\n                  name=\"confirmPassword\"\n                  label=\"Confirm Password\"\n                  type=\"password\"\n                  validate={{\n                    required: {\n                      value: { confirmPassword },\n                      errorMessage: \"Please enter your confirm password\",\n                    },\n                    pattern: {\n                      value: \"^[A-Za-z0-9]+$\",\n                      errorMessage:\n                        \"Confirm Password must be composed only with letter and numbers\",\n                    },\n                    minLength: {\n                      value: 5,\n                      errorMessage:\n                        \"Password name must be b/w 5 to 16 characters\",\n                    },\n                    maxLength: {\n                      value: 16,\n                      errorMessage:\n                        \"Password name must be b/w 5 to 16 characters\",\n                    },\n                  }}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col className=\"text-center\" sm=\"12\" md={{ size: 6, offset: 3 }}>\n                <Button type=\"submit\" color=\"primary\">\n                  Submit\n                </Button>\n              </Col>\n            </Row>\n          </Container>\n        </AvForm>\n        <div>\n          {this.state.showDetails && (\n            <div className=\"mt-5\">\n              <>\n                <p className=\"text-secondary h5 font-weight-bold font-italic\">\n                  Submitted form values\n                </p>\n              </>\n              <ul style={{ listStyleType: \"none\" }}>\n                <li>\n                  <span\n                    style={{\n                      fontWeight: \"bold\",\n                      fontStyle: \"italic\",\n                      color: \"grey\",\n                    }}\n                  >\n                    User Name:{\" \"}\n                  </span>\n                  {this.state.userName}\n                </li>\n                <li>\n                  <span\n                    style={{\n                      fontWeight: \"bold\",\n                      fontStyle: \"italic\",\n                      color: \"grey\",\n                    }}\n                  >\n                    Mobile No:{\" \"}\n                  </span>\n                  {this.state.mobile}\n                </li>\n                <li>\n                  <span\n                    style={{\n                      fontWeight: \"bold\",\n                      fontStyle: \"italic\",\n                      color: \"grey\",\n                    }}\n                  >\n                    Mail Address:{\" \"}\n                  </span>\n                  {this.state.emailId}\n                </li>\n              </ul>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nexport default class HomePage extends React.Component {\n  render () {\n    return (\n      <div>\n        <p className=\" h1 text-center text-secondary font-weight-bold font-italic mt-5\">\n          Employee Portal\n        </p>\n        <Link\n          to=\"/home/login\"\n          className=\"btn btn-primary float-left  ml-5 mt-5\"\n        >\n          Login\n        </Link>\n        <Link\n          to=\"/home/register\"\n          className=\"btn btn-primary float-right mr-5 mt-5\"\n        >\n          Sign Up\n        </Link>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { AvForm, AvField } from 'availity-reactstrap-validation'\nimport { Button, Container, Row, Col } from 'reactstrap'\n\nexport default class Login extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      loginUserName: '',\n      loginPassword: ''\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n    console.log(this.state)\n  }\n\n  formSubmit = () => {\n    if (\n      this.state.loginUserName === 'admin' &&\n      this.state.loginPassword === 'admin'\n    ) {\n      alert('credentials matched')\n      // eslint-disable-next-line react/prop-types\n      this.props.history.push('/home/employeelist')\n      return true\n    } else {\n      alert('invalid credentials')\n      return false\n    }\n  }\n\n  render () {\n    const { loginUserName, loginPassword } = this.state\n    return (\n      <div>\n        <div>\n          <p className=\" h4 text-center text-primary font-weight-bold font-italic\">\n            Login\n          </p>\n        </div>\n        <AvForm onValidSubmit={this.formSubmit}>\n          <Container>\n            <Row>\n              <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                <AvField\n                  onChange={this.handleChange}\n                  name=\"loginUserName\"\n                  label=\"User Name\"\n                  type=\"text\"\n                  validate={{\n                    required: {\n                      value: { loginUserName },\n                      errorMessage: 'Please enter your user name'\n                    },\n                    pattern: {\n                      value: '^[A-Za-z0-9]+$',\n                      errorMessage:\n                        'First Name must be composed only with letter and numbers'\n                    },\n                    minLength: {\n                      value: 4,\n                      errorMessage: 'User name must be b/w 4 to 16 characters'\n                    },\n                    maxLength: {\n                      value: 16,\n                      errorMessage: 'User name must be b/w 6 to 16 characters'\n                    }\n                  }}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                <AvField\n                  onChange={this.handleChange}\n                  name=\"loginPassword\"\n                  label=\"Password\"\n                  type=\"password\"\n                  validate={{\n                    required: {\n                      value: { loginPassword },\n                      errorMessage: 'Please enter your password'\n                    },\n                    pattern: {\n                      value: '^[A-Za-z0-9]+$',\n                      errorMessage:\n                        'Password must be composed only with letter and numbers'\n                    },\n                    minLength: {\n                      value: 5,\n                      errorMessage:\n                        'Password name must be b/w 5 to 16 characters'\n                    },\n                    maxLength: {\n                      value: 16,\n                      errorMessage:\n                        'Password name must be b/w 6 to 16 characters'\n                    }\n                  }}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                <Button type=\"submit\" color=\"primary\">\n                  Login\n                </Button>\n              </Col>\n            </Row>\n          </Container>\n        </AvForm>\n      </div>\n    )\n  }\n}\n\n// Login.propTypes = {\n\n// }\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Registration from './components/Registration'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch\n} from 'react-router-dom'\nimport HomePage from './components/HomePage'\nimport Login from './components/Login'\nimport './styles.css'\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/home\" exact component={HomePage} />\n          <Route path=\"/home/login\" component={Login} />\n          <Route path=\"/home/register\" component={Registration} />\n          <Redirect to=\"/home\" />\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<App />, rootElement)\n"],"sourceRoot":""}